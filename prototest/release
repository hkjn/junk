#
# Push a release of the project.
#
set -euo pipefail

declare BASE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
declare VERSION="$(cat VERSION)"
declare COMMIT=$(git log -1 --pretty=format:"%h")
declare COMMIT_MSG=$(git log --format=%B -n 1)
declare GITHUB_TOKEN=${GITHUB_TOKEN:-"$(cat /etc/secrets/github/release_token)"}
declare LINK_URL="https://github.com/hkjn/junk/releases/tag"

preflight_checks() {
  [[ "$GITHUB_TOKEN" ]] || {
    fatal "No GITHUB_TOKEN set in environment."
  }

  info "About to release v${VERSION} of prototest at $COMMIT: '$COMMIT_MSG'."
  confirm
}

build_binaries() {
  info "Building binaries.."
  ./build
}

create_tag() {
  # TODO: Verify repo is in clean state, as repo_report would see it, before tagging and releasing.
  info "Syncing down changes from remote.."
  git pull
  info "Pushing any changes to remote.."
  git push
  info "Tagging $VERSION at $COMMIT.."
  git tag $VERSION $COMMIT
  git push origin --tags
}

create_release() {
  info "Creating release.."
  local payload
  payload=$(cat <<EOT
{
  "tag_name": "$VERSION",
  "name": "$VERSION",
  "body": "$COMMIT_MSG",
  "draft": false,
  "prerelease": false
}
EOT
)
  local response
  response=$(curl -s \
     -H "Content-type: application/json" \
     -H "Accept: application/vnd.github.v3+json" \
     -H "Authorization: token ${GITHUB_TOKEN}" \
     --data "${payload}" \
     https://api.github.com/repos/hkjn/junk/releases)

  debugV "Response is: ${response}"
  local url
  url=$(echo "${response}" | jq -r ".upload_url")
  [[ "${url}" ]] && [[ "${url}" != "null" ]] || fatal "Couldn't get upload_url from Github response: ${response}"
  debugV "URL is '${url}'"
  export URL=${url%\{?name,label\}}
  debugV "Stripped url is '${URL}'"
}

upload() {
  [[ $# -ne 2 ]] && fatal "usage: upload file url"
  info "Uploading $1 to $2.."
  local response
  response=$(curl \
     -H "Content-type: application/octet-stream" \
     -H "Accept: application/vnd.github.v3+json" \
     -H "Authorization: token $GITHUB_TOKEN" \
     --data-binary @${1} \
     --progress-bar \
     "${2}?name=${1}" | tee /dev/null)
  debugV "Upload response for $1: $response"
  [[ ${PIPESTATUS[0]} -eq 0 ]] || fatal "Failed to upload $1"
}

cd "${BASE}"
source "logging.sh"
source "slack.sh"

preflight_checks
build_binaries
create_tag
# TODO(hkjn): Also should run protoc in case .proto files changed
# here (or fail in case or diff; changed .pb.proto files should
# have been committed).
create_release

upload report_client_x86_64 ${URL}
upload report_server_x86_64 ${URL}
upload report_client_armv7l ${URL}
upload report_server_armv7l ${URL}
slacksend "Released ${LINK_URL}/${VERSION}."
