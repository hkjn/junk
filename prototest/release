#!/usr/bin/env bash

set -euo pipefail

load() {
	local ns="hkjn.me"
	local p="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
	while [ "$p" != "" ] && [ $(basename $p) != "$ns" ]; do p="${p/\/$(basename $p)/}"; done
	source "$p/lib/$1" 2>/dev/null || { echo "[$0] FATAL: Couldn't find $ns/lib/$1." >&2; exit 1; }
	export BASE="$p"
}
load "logging.sh"
cd "$BASE/junk/prototest"

declare VERSION="$(cat VERSION)"
declare COMMIT=$(git log -1 --pretty=format:"%h")
declare COMMIT_MSG=$(git log --format=%B -n 1)
export GITHUB_TOKEN=${GITHUB_TOKEN:-""}

preflight_checks() {
  [[ "$GITHUB_TOKEN" ]] || {
    fatal "No GITHUB_TOKEN set in environment."
  }

  info "About to release v${VERSION} of prototest at $COMMIT: '$COMMIT_MSG'."
  confirm
}

build_binaries() {
  info "Building report_client_amd64.."
  export CGO_ENABLED=0
  GOARCH=amd64 go build -o report_client_amd64 ./client/
  info "Building report_server_amd64.."
  GOARCH=amd64 go build -o report_server_amd64 ./server/

  info "Building report_client_arm.."
  GOARCH=arm go build -o report_client_arm ./client/
  info "Building report_server_arm.."
  GOARCH=arm go build -o report_server_arm ./server/
}

create_tag() {
  # TODO: Verify repo is in clean state, as repo_report would see it, before tagging and releasing.
  info "Syncing down changes from remote.."
  git pull
  info "Pushing any changes to remote.."
  git push
  info "Tagging $VERSION at $COMMIT.."
  git tag $VERSION $COMMIT
  git push origin --tags
}

upload() {
  [[ $# -ne 2 ]] && fatal "usage: upload file url"
  info "Uploading $1 to $2.."
  local response
  response=$(curl \
     -H "Content-type: application/octet-stream" \
     -H "Accept: application/vnd.github.v3+json" \
     -H "Authorization: token $GITHUB_TOKEN" \
     --data-binary @${1} \
     --progress-bar \
     "${2}?name=${1}" | tee /dev/null)
  debugV "Upload response for $1: $response"
  [[ ${PIPESTATUS[0]} -eq 0 ]] || fatal "Failed to upload $1"
}

create_release() {
  info "Creating release.."
  local payload
  payload=$(cat <<EOT
{
  "tag_name": "$VERSION",
  "name": "$VERSION",
  "body": "$COMMIT_MSG",
  "draft": false,
  "prerelease": false
}
EOT
)
  local response
  response=$(curl -s \
     -H "Content-type: application/json" \
     -H "Accept: application/vnd.github.v3+json" \
     -H "Authorization: token $GITHUB_TOKEN" \
     --data "$payload" \
     https://api.github.com/repos/hkjn/junk/releases)

  debugV "Response is: $response"
  local url
  url=$(echo "$response" | jq -r ".upload_url")
  [[ "$url" ]] && [[ "$url" != "null" ]] || fatal "Couldn't get upload_url from Github response: $response"
  debugV "URL is '$url'"
  export URL=${url%\{?name,label\}}
  debugV "Stripped url is '$URL'"
}

preflight_checks
build_binaries
create_tag
create_release

upload report_client_amd64 $URL
upload report_server_amd64 $URL
upload report_client_arm $URL
upload report_server_arm $URL
