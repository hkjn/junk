// Code generated by protoc-gen-go.
// source: report.proto
// DO NOT EDIT!

/*
Package report is a generated protocol buffer package.

It is generated from these files:
	report.proto

It has these top-level messages:
	Request
	Response
*/
package report

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message.
type Request struct {
	Name string                     `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ts   *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=ts" json:"ts,omitempty"`
	Info map[string]string          `protobuf:"bytes,3,rep,name=info" json:"info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func (m *Request) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

// The response message.
type Response struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "report.Request")
	proto.RegisterType((*Response)(nil), "report.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Report service

type ReportClient interface {
	// Send report to server.
	Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type reportClient struct {
	cc *grpc.ClientConn
}

func NewReportClient(cc *grpc.ClientConn) ReportClient {
	return &reportClient{cc}
}

func (c *reportClient) Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/report.Report/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Report service

type ReportServer interface {
	// Send report to server.
	Send(context.Context, *Request) (*Response, error)
}

func RegisterReportServer(s *grpc.Server, srv ReportServer) {
	s.RegisterService(&_Report_serviceDesc, srv)
}

func _Report_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/report.Report/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServer).Send(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Report_serviceDesc = grpc.ServiceDesc{
	ServiceName: "report.Report",
	HandlerType: (*ReportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Report_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "report.proto",
}

func init() { proto.RegisterFile("report.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x24, 0xa6, 0x66, 0x2a, 0x58, 0x06, 0x0f, 0x31, 0x17, 0x43, 0xe8, 0x21, 0x28,
	0x6e, 0x21, 0x22, 0x8a, 0xc7, 0x82, 0x07, 0x6f, 0xb2, 0xfa, 0x02, 0x29, 0x4e, 0x62, 0x6d, 0xb3,
	0x1b, 0xb3, 0x1b, 0xa1, 0x8f, 0xe5, 0x1b, 0x4a, 0x77, 0x13, 0x85, 0xde, 0x66, 0xfe, 0xfd, 0xf9,
	0xe6, 0x5b, 0x38, 0xed, 0xa8, 0x55, 0x9d, 0xe1, 0x6d, 0xa7, 0x8c, 0xc2, 0xd0, 0x6d, 0xc9, 0x65,
	0xad, 0x54, 0xbd, 0xa5, 0x85, 0x4d, 0x57, 0x7d, 0xb5, 0x30, 0xeb, 0x86, 0xb4, 0x29, 0x9b, 0xd6,
	0x15, 0xb3, 0x1f, 0x06, 0x13, 0x41, 0x5f, 0x3d, 0x69, 0x83, 0x08, 0x81, 0x2c, 0x1b, 0x8a, 0x59,
	0xca, 0xf2, 0x48, 0xd8, 0x19, 0xaf, 0xc0, 0x33, 0x3a, 0xf6, 0x52, 0x96, 0x4f, 0x8b, 0x84, 0x3b,
	0x1a, 0x1f, 0x69, 0xfc, 0x6d, 0xa4, 0x09, 0xcf, 0x68, 0xbc, 0x81, 0x60, 0x2d, 0x2b, 0x15, 0xfb,
	0xa9, 0x9f, 0x4f, 0x8b, 0x0b, 0x3e, 0x18, 0x0d, 0x78, 0xfe, 0x2c, 0x2b, 0xf5, 0x24, 0x4d, 0xb7,
	0x13, 0xb6, 0x96, 0xdc, 0x43, 0xf4, 0x17, 0xe1, 0x0c, 0xfc, 0x0d, 0xed, 0x86, 0xd3, 0xfb, 0x11,
	0xcf, 0xe1, 0xf8, 0xbb, 0xdc, 0xf6, 0x64, 0x8f, 0x47, 0xc2, 0x2d, 0x8f, 0xde, 0x03, 0xcb, 0xe6,
	0x70, 0x22, 0x48, 0xb7, 0x4a, 0x6a, 0xc2, 0x18, 0x26, 0x0d, 0x69, 0x5d, 0xd6, 0xa3, 0xf6, 0xb8,
	0x16, 0x77, 0x10, 0x0a, 0x2b, 0x80, 0xd7, 0x10, 0xbc, 0x92, 0x7c, 0xc7, 0xb3, 0x03, 0xa3, 0x64,
	0xf6, 0x1f, 0x38, 0x5c, 0x76, 0xb4, 0x9c, 0x43, 0xdc, 0x10, 0xff, 0xd8, 0x7c, 0x4a, 0xf7, 0x4d,
	0xb3, 0x57, 0x77, 0xb5, 0xe5, 0x00, 0x7c, 0x61, 0xab, 0xd0, 0xbe, 0xdd, 0xfe, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0x13, 0xc4, 0x4c, 0x76, 0x01, 0x00, 0x00,
}
