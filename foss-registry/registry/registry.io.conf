#
# Nginx sites config file for registry.io.
#

upstream docker-registry {
	# TODO(hkjn): Maybe better to populate this from templated
	# variables after all, otherwise we have duped magic numbers here:
  server registry.io:5000;
}

## Set a variable to help us decide if we need to add the
## 'Docker-Distribution-Api-Version' header.
## The registry always sets this header.
## In the case of nginx performing auth, the header will be unset
## since nginx is auth-ing before proxying.
map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {
  'registry/2.0' '';
  default registry/2.0;
}

# HTTPS server.
server {
  listen 443 ssl;
  server_name registry.io;
	ssl_certificate     /etc/ssl/registry.io.crt;
	ssl_certificate_key /etc/ssl/registry.io.key;
	ssl_dhparam         /etc/ssl/dh.pem;
	ssl_protocols              TLSv1.1 TLSv1.2;
	ssl_prefer_server_ciphers  on;
	ssl_session_timeout        5m;
	ssl_session_cache          shared:SSL:5m;

	# Enable HSTS.
	add_header Strict-Transport-Security max-age=15768000;

	# TODO(hkjn): Try out OCSP Stapling:
	# fetch OCSP records from URL in ssl_certificate and cache them
	# ssl_stapling on;
	# ssl_stapling_verify on;
	## verify chain of trust of OCSP response using Root CA and Intermediate certs
	# ssl_trusted_certificate /path/to/root_CA_cert_plus_intermediates;
	# resolver <IP DNS resolver>;

  # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  # TODO(hkjn): Go back to larger set of ciphers below if  "strong security" isn't widely accepted.
	# Explicitly set list of supported ciphers, from list of "modern compatibility"
	# from https://wiki.mozilla.org/Security/Server_Side_TLS#Modern_compatibility:
	# ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;

  # disable any limits to avoid HTTP 413 for large image uploads
  client_max_body_size 0;

  # required to avoid HTTP 411: see Issue #1486 (https://github.com/docker/docker/issues/1486)
  chunked_transfer_encoding on;

  location /v2/ {
    # Do not allow connections from docker 1.5 and earlier
    # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
    if (\$http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*\$" ) {
      return 404;
    }

    # To add basic authentication to v2 use auth_basic setting.
    auth_basic "Registry realm";
    auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;

    ## If $docker_distribution_api_version is empty, the header will not be added.
    ## See the map directive above where this variable is defined.
    add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;

    proxy_pass                          http://docker-registry:5000;
    proxy_set_header  Host              \$http_host;   # required for docker client's sake
    proxy_set_header  X-Real-IP         \$remote_addr; # pass on real client's IP
    proxy_set_header  X-Forwarded-For   \$proxy_add_x_forwarded_for;
    proxy_set_header  X-Forwarded-Proto \$scheme;
    proxy_read_timeout                  900;
  }
}
